const N = 9;
const Empty = 0;
var numSelected = null;    //check for number input selection
var errors = 0;

const puzzle = [
    [0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,3,0,8,5],
    [0,0,1,0,2,0,0,0,0],
    [0,0,0,5,0,7,0,0,0],
    [0,0,4,0,0,0,1,0,0],
    [0,9,0,0,0,0,0,0,0],
    [5,0,0,0,0,0,0,7,3],
    [0,0,2,0,1,0,0,0,0],
    [0,0,0,0,4,0,0,0,9]
];

window.onload = function () {
    setGame();
}

function setGame () {
    //digit inputs
    for ( let i = 1; i <= N; i++) {
        let number = document.createElement("div"); // <div> </div>
        number.id = i                                       //<div id= "i"> </div>
        number.addEventListener("click", selectNumber);
        number.innerText = i;                               //<div id= "i">i</div>
        number.classList.add("number");           //<div id= "i" class= "number">i</div> 
        document.getElementById("digits").appendChild(number); // places each of <div id= "i" class= "number">i</div>  under div digits in html
    }
    //board
    build(puzzle); 
}

function build(board) {
    for ( let r = 0; r < N; r++) {
        for (let c = 0; c < N; c++){
            let tile = document.createElement("div");
            tile.id = r.toString() + "-" + c.toString();     //gives specific row-column id to a cell
            if (puzzle[r][c] != Empty) {                    //skips setting the zeros which means Empty
                tile.innerText = board[r][c];              //writes game board pointed info to that div
                tile.classList.add("tile_start"); //gives it a specific class to know start up numbers
            }

            if (r == 2 || r == 5) {                         //helps to create grid
                tile.classList.add("horizontal_line"); // draws grid horizontal line
            }
            if (c == 2 || c == 5) {                         //helps to create grid
                tile.classList.add("vertical_line"); // draws grid vertical line
            }
            tile.addEventListener("click", selectTile);
            tile.classList.add("tile");
            document.getElementById("board").append(tile);
        }
    }
}
function selectNumber () {
    if (numSelected != null) {
        numSelected.classList.remove("number_selected"); /* if a num was selected already, clicking a number removes the number_selected
                                                            class first before adding number_selected to ensure only one selection*/
    }
    numSelected = this;                                 // this reassign numSelected to the particular number div clicked
    numSelected.classList.add("number_selected");  // replaces the class name from number to number_selected
}

function selectTile () {
    if (numSelected) {          //does this only if numSelected != null
        /*if (this.innerText != "") {  //disallow overwriting after input is done
            return;                 //exits function and do nothing else
        }
        */
        let cordinate = this.id.split("-"); // id for each cell looks like 0-0 0-1 2-4  split splits and collect to array of strings
        let r = parseInt(cordinate[0]);
        let c = parseInt(cordinate[1]);
        if (solution[r][c]  == numSelected.id) { //allow change only if input is the correct answer
            this.innerText = numSelected.id    // changes innerText of clicked box to numSelected id which is 1 to 9
        }
        else {                                  //if wrong, adds up ur errors
            errors += 1;
            document.getElementById("errors").innerText = errors;
        }
    }
}

//solution algorithm
var solution = [
    [0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,3,0,8,5],
    [0,0,1,0,2,0,0,0,0],
    [0,0,0,5,0,7,0,0,0],
    [0,0,4,0,0,0,1,0,0],
    [0,9,0,0,0,0,0,0,0],
    [5,0,0,0,0,0,0,7,3],
    [0,0,2,0,1,0,0,0,0],
    [0,0,0,0,4,0,0,0,9]
];                          //solution is generated by backtracking

    if (solve(solution, 0, 0)) {
        console.log("Solve was successful");
    }
    else {
        console.log("no solution exists");
    }
function isSafe(board, row, col, num) {
    for (let c = 0; c < 9; c++) {
        if (board[row][c] == num) {
          return false;
        }
    }

    for (let r = 0; r < 9; r++) {
      if (board[r][col] == num) {
        return false;
      }
    }

    let startRow = row - row % 3;  //delimits any row number to a row in its grid 3 by 3
    let startCol = col -col % 3;

    for(let r = 0; r < 3; r++) {
        for (let c = 0; c < 3; c++) {
            if (board[r + startRow][c + startCol] == num) {
                return false;
            }
        }
    }
    return true;
}

function solve(board, row, col) {
    //stops backtracking on reaching the end of board
    if (row == 9 - 1 && col == 9){
        return true
    }
    // moves to next row after exhausting all columns in the row
    if (col == 9){
        row++;
        col = 0;
    }
    //skips iteration for non empty cells and try solve algorithm for next column
    if (board[row][col] != 0) {
        return solve(board, row, col + 1);
    }

    for (let num = 1; num <= 9; num++) {
        if (isSafe(board,row,col,num)){
            board[row][col] = num;
            if (solve(board,row, col + 1)) {
                return true;
            }
        }
        board[row][col] = 0;
    }
    return false;
}

/*
//for testing solution algorithm
var puzzle = [
    [0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,3,0,8,5],
    [0,0,1,0,2,0,0,0,0],
    [0,0,0,5,0,7,0,0,0],
    [0,0,4,0,0,0,1,0,0],
    [0,9,0,0,0,0,0,0,0],
    [5,0,0,0,0,0,0,7,3],
    [0,0,2,0,1,0,0,0,0],
    [0,0,0,0,4,0,0,0,9]
];
if (solve(puzzle, 0, 0)) {
    console.log("Solve was successful");
    console.log(puzzle);
}
else {
    console.log("no solution exists");
}
*/